openapi: 3.0.0
info:
    title: 'Express API with Swagger'
    version: 1.0.0
    description: 'Express 기반의 Todo API'
servers:
    -
        url: 'http://localhost:3000'
paths:
    /v1/auth/signup:
        post:
            tags:
                - '회원 관리'
            summary: 회원가입
            description: '새로운 사용자를 등록합니다.'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    example: 김사람1
                                    description: '사용자 이름'
                                email:
                                    type: string
                                    example: saaraam1@example.com
                                    description: '사용자 이메일'
                                password:
                                    type: string
                                    example: Tkfka123!@
                                    description: '사용자 비밀번호'
                                confirmPassword:
                                    type: string
                                    example: Tkfka123!@
                                    description: '사용자 비밀번호 확인'
                            required:
                                - name
                                - email
                                - password
                                - confirmPassword
            responses:
                '200':
                    description: '회원가입 완료'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string, example: success}
                '400':
                    description: '이메일 중복 오류'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: {type: string, example: '이미 존재하는 이메일입니다.'}
                '403':
                    description: '입력값 오류'
                    content:
                        application/json:
                            schema:
                                type: object
                                additionalProperties: true
                                example:
                                    errors: [{type: field, value: Tk, msg: '비밀번호는 8자 이상이어야 합니다.', path: password, location: body}]
    v1/users:
        get:
            tags:
                - 사용자
            summary: '전체 사용자 조회'
            description: '전체 사용자 리스트 조회'
            responses:
                '200':
                    description: 성공
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties: {id: {type: integer, description: '사용자 id'}, name: {type: string, description: 이름}, email: {type: string, description: 이메일}}
                                    example: [{id: 1, name: 김사람, email: john.doe@example.com}, {id: 2, name: 이사람, email: jane.smith@example.com}]
    'v1/users/{userId}':
        get:
            tags:
                - 사용자
            summary: '특정 유저 정보'
            description: '특정 유저 정보를 ID로 검색해 조회'
            parameters:
                -
                    in: path
                    name: userId
                    required: true
                    description: 'user id 입력'
                    schema:
                        type: integer
            responses:
                '200':
                    description: 성공
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    userId: {type: integer, description: '사용자 id'}
                                    name: {type: string, description: 이름}
                                    email: {type: string, description: 이메일}
                                example:
                                    userId: '1'
                                    name: 김사람
                                    email: john.doe@example.com
components: {}
tags: []
